10-Minute Complete Step-by-Step Tutorial

* Prerequisites :
** The TankWars.zip file - Unzip it in any folder of your choice
** 10 minutes


* Introduction :
** As mentioned in the README, all you need to do to control your Tank is fill in the get_player_move () function in DecisionMaker1.cpp.
** To that end, this tutorial will take you through a series of increasingly complex definitions for that function.
** That will also familiarize you with the general information and structure of the code available to you to make your ultimate, indestructible Tank

* Aim of the Game:
** To end the game with maximum points
** The game ends when either your Falcon (military base) is killed or if your Tank dies or if the same happens to the opponent or if the Maximum number of moves are exceeded

* Description :
** The general structure of the Game is as follows :
*** The Arena or the environment in which the game runs and where the Bots clash contains all objects
*** So, in TankWars.cpp, where we want to run the Game Loop again and again, we simply call various methods of Arena object which will carry out various actions.
*** We need not be concerned with any of that
*** All that matters is that at each iteration, DecisionMaker1 is asked for a Move which will be used to make the Tank move on the Map
*** Of course, it is not just a matter of returning a Move, because you have to consider all the various elements on the Map, like Gold pieces, Machine Guns, Enemy Tank, Enemy Base (ie. Falcon), etc. in order to win the game
*** So, we'll consider all the mechanisms in place to give us the information we need and analyze them to return the best move we can think of

* Step 0 - The co-ordinate axes

  (0, 0)
  +------------------------> (y-axis)
  |
  |
  |
  |
  |
  |
  |
  |
  |
  |
  v
  (x-axis)

		       ^ UP    	
                       |   	
                       |   	
               LEFT    |   RIGHT
              <--------|-------->
                       |   
                       |   
                       |   
		       v DOWN

* Step 1 - A simple proof-of-concept Tank:
** This will make your Tank carry out the same action each time
** Just write :
   return Move (GO_RIGHT);
** Then, 'make play' on the command-line, followed by 'make display'
** Not surprisingly, this makes your Tank move right each time
** However, that would have either led to it being shot by one of the Machine Guns out there or inevitably dashing into a wall and dying.
** Note : If your Tank dies, the opponent gains 400 points, so that is another incentive to stay alive
* Step 2 - Each of the 8 moves possible
  // Go in one of the four directions
  return Move (GO_UP);
  return Move (GO_DOWN);
  return Move (GO_LEFT);
  return Move (GO_RIGHT);

  // Shoot in one of the four directions
  return Move (SHOOT_UP);
  return Move (SHOOT_DOWN);
  return Move (SHOOT_LEFT);
  return Move (SHOOT_RIGHT);
* Step 3 - Carries out each of the four actions
** Now, you may not be satisfied with merely moving right or shooting left all the time.
** Let's try making some complex moves
** Say you want to pick up the gold piece nearest to you
** It's simple. All you need to do is 
   return go_to_nearest_gold_move (map);
** Now, each time, your Tank will move in the direction of the nearest gold piece. Neat, huh?
** Similarly, if you want to
** Attack the Enemy Falcon
   return attack_enemy_falcon_move (map);
** Attack the Enemy Tank itself
   return attack_enemy_tank_move (map);
* Step 5 - Introduce calculate_best_action_plan
** However, it can get pretty monotonous doing the same action again and again.
** To aid in making your Tank dynamic, we have come up with a Decision Making model
   You can use it to calculate the best moves for your Tank based on the situation and your preferences.
** For example, there are four different strategies that you can choose by default.
** They are 
*** Aggressive
*** Defensive
*** Greedy
*** Your own customized version
** To put it in action, just say
   int my_strategy = AGGRESSIVE;
   int my_action_plan = calculate_best_action_plan (my_strategy, map);
   // Now, my_action_plan will contain one of the four basic action plans mentioned above
   return return_best_move (my_action_plan, map);
* Step 6 - Changing Decision Table weightage
* Introduction - Can shoot items
* Introduction - Everything else in Info
* Hints about various advanced strategies
* Dodge bullet
* Attack bunkers
